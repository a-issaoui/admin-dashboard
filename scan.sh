#!/bin/bash

# Enhanced Project Structure Scanner
# Usage: ./scan.sh [output_file] [max_depth]

OUTPUT_FILE="${1:-project_structure.txt}"
MAX_DEPTH="${2:-}"
EXCLUDE_PATTERNS="node_modules|\.git|\.next|dist|build|coverage|\.cache|\.vscode|\.idea|__pycache__|\.DS_Store|Thumbs\.db"

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get project info
get_project_info() {
    local project_name=$(basename "$(pwd)")
    local total_files=$(find . -type f -not -path '*/.*' | grep -vE "$EXCLUDE_PATTERNS" | wc -l)
    local total_dirs=$(find . -type d -not -path '*/.*' | grep -vE "$EXCLUDE_PATTERNS" | wc -l)

    cat << EOF
=== PROJECT OVERVIEW ===
Project Name: $project_name
Location: $(pwd)
Total Files: $total_files
Total Directories: $total_dirs
Scan Date: $(date)
Generated by: Enhanced Project Structure Scanner

EOF
}

# Generate tree structure with custom formatting
generate_tree() {
    local depth_flag=""
    if [ -n "$MAX_DEPTH" ]; then
        depth_flag="-L $MAX_DEPTH"
    fi

    if command -v tree >/dev/null 2>&1; then
        print_status "Using tree command for structure generation"
        tree $depth_flag -a -I "$EXCLUDE_PATTERNS" --dirsfirst --filesfirst -F
    else
        print_warning "Tree command not found, using fallback method"
        generate_tree_fallback
    fi
}

# Fallback tree generation using find
generate_tree_fallback() {
    local depth_flag=""
    if [ -n "$MAX_DEPTH" ]; then
        depth_flag="-maxdepth $MAX_DEPTH"
    fi

    find . $depth_flag -not -path '*/.*' | grep -vE "$EXCLUDE_PATTERNS" | sort | sed 's|[^/]*/|- |g; s|- $||'
}

# Get file statistics by extension
get_file_stats() {
    echo -e "\n=== FILE STATISTICS ==="
    find . -type f -not -path '*/.*' | grep -vE "$EXCLUDE_PATTERNS" | \
    sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10 | \
    while read count ext; do
        printf "%-15s: %d files\n" "$ext" "$count"
    done
}

# Get largest files
get_large_files() {
    echo -e "\n=== LARGEST FILES ==="
    find . -type f -not -path '*/.*' | grep -vE "$EXCLUDE_PATTERNS" | \
    xargs ls -la 2>/dev/null | sort -k5 -nr | head -5 | \
    awk '{printf "%-60s %8s %s %s\n", $9, $5, $6, $7}'
}

# Main execution
main() {
    print_status "Starting project structure scan..."
    print_status "Output file: $OUTPUT_FILE"

    if [ -n "$MAX_DEPTH" ]; then
        print_status "Maximum depth: $MAX_DEPTH"
    fi

    # Clear or create output file
    > "$OUTPUT_FILE"

    {
        get_project_info
        echo "=== DIRECTORY STRUCTURE ==="
        generate_tree
        get_file_stats
        get_large_files
        echo -e "\n=== END OF SCAN ==="
    } >> "$OUTPUT_FILE"

    print_status "Scan completed successfully!"
    print_status "Results saved to: $OUTPUT_FILE"

    # Show summary
    local lines=$(wc -l < "$OUTPUT_FILE")
    print_status "Generated $lines lines of output"

    # Ask if user wants to view the file
    echo -e "\n${BLUE}Would you like to view the results? (y/n):${NC} "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        if command -v less >/dev/null 2>&1; then
            less "$OUTPUT_FILE"
        else
            cat "$OUTPUT_FILE"
        fi
    fi
}

# Help function
show_help() {
    cat << EOF
Enhanced Project Structure Scanner

USAGE:
    $0 [output_file] [max_depth]

OPTIONS:
    output_file    Output filename (default: project_structure.txt)
    max_depth      Maximum directory depth to scan (default: unlimited)

EXAMPLES:
    $0                              # Basic scan
    $0 my_project.txt               # Custom output file
    $0 structure.txt 3              # Limit depth to 3 levels

EXCLUDED PATTERNS:
    node_modules, .git, .next, dist, build, coverage, .cache,
    .vscode, .idea, __pycache__, .DS_Store, Thumbs.db

EOF
}

# Check for help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Run main function
main